{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 1}, "tests": {"0": {"status": "FAIL", "message": "       AttributeError: 'NoneType' object has no attribute 'find_element'\n", "test_name": "test_transfer_funds[12345-54321-100-True]", "rerun": "0"}, "1": {"status": "ERROR", "message": "get_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"47964b3ac79529cd06b3d0913ef3a388\")>\n\n    @pytest.fixture(scope='function')\n    def logged_in_driver(get_driver):\n        driver = get_driver\n        login_page = LoginPage(driver)\n    \n        # Log in before running each test\n>       login_page.enter_username(VALID_USERNAME)\n\ntest\\conftest.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmodule\\page_module_class.py:31: in enter_username\n    self.enter_value(username, LoginPageLocators.USERNAME_FIELD)\nbase\\selenium_base.py:23: in enter_value\n    element = self.get_element(locator)\nbase\\selenium_base.py:13: in get_element\n    return self.wait.until(ec.visibility_of_element_located(locator))\nC:\\python_3.12\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nC:\\python_3.12\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nC:\\python_3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\python_3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000260AF0D9CA0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: Unable to receive message from ren...07FF7351B4A1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA6AE87374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA6B6FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: Unable to receive message from renderer\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=128.0.6613.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF73524B5D2+29090]\nE       \t(No symbol) [0x00007FF7351BE689]\nE       \t(No symbol) [0x00007FF73507B1CA]\nE       \t(No symbol) [0x00007FF735063F0D]\nE       \t(No symbol) [0x00007FF735063C10]\nE       \t(No symbol) [0x00007FF735062AFB]\nE       \t(No symbol) [0x00007FF735089166]\nE       \t(No symbol) [0x00007FF7351164BB]\nE       \t(No symbol) [0x00007FF7350F6493]\nE       \t(No symbol) [0x00007FF7350C09B1]\nE       \t(No symbol) [0x00007FF7350C1B11]\nE       \tGetHandleVerifier [0x00007FF735568C5D+3295277]\nE       \tGetHandleVerifier [0x00007FF7355B4843+3605523]\nE       \tGetHandleVerifier [0x00007FF7355AA707+3564247]\nE       \tGetHandleVerifier [0x00007FF735306EB6+797318]\nE       \t(No symbol) [0x00007FF7351C980F]\nE       \t(No symbol) [0x00007FF7351C53F4]\nE       \t(No symbol) [0x00007FF7351C5580]\nE       \t(No symbol) [0x00007FF7351B4A1F]\nE       \tBaseThreadInitThunk [0x00007FFA6AE87374+20]\nE       \tRtlUserThreadStart [0x00007FFA6B6FCC91+33]\n\nC:\\python_3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n", "test_name": "test_transfer_funds[12345-54321-#$%-False]", "rerun": "0"}}, "suite_name": "test/test_feature.py"}}}, "date": "September 09, 2024", "start_time": 1725901322.512466, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "1", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "2"}