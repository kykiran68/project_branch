{"content": {"suites": {"0": {"status": {"total_pass": 3, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 2, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope=\"function\")\n    def driver():\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.implicitly_wait(10)\n>       driver.get(\"https://parabank.parasoft.com/parabank/index.htm\")\n\ntest_pract.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\python_3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\python_3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022508D93EF0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7F9CE4A7F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA6AE87374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA6B6FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=128.0.6613.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7F9D7B632+29090]\nE       \t(No symbol) [0x00007FF7F9CEE6E9]\nE       \t(No symbol) [0x00007FF7F9BAB1CA]\nE       \t(No symbol) [0x00007FF7F9B7FAF5]\nE       \t(No symbol) [0x00007FF7F9C2E2E7]\nE       \t(No symbol) [0x00007FF7F9C45EE1]\nE       \t(No symbol) [0x00007FF7F9C26493]\nE       \t(No symbol) [0x00007FF7F9BF09B1]\nE       \t(No symbol) [0x00007FF7F9BF1B11]\nE       \tGetHandleVerifier [0x00007FF7FA09883D+3294125]\nE       \tGetHandleVerifier [0x00007FF7FA0E4423+3604371]\nE       \tGetHandleVerifier [0x00007FF7FA0DA2E7+3563095]\nE       \tGetHandleVerifier [0x00007FF7F9E36F16+797318]\nE       \t(No symbol) [0x00007FF7F9CF986F]\nE       \t(No symbol) [0x00007FF7F9CF5454]\nE       \t(No symbol) [0x00007FF7F9CF55E0]\nE       \t(No symbol) [0x00007FF7F9CE4A7F]\nE       \tBaseThreadInitThunk [0x00007FFA6AE87374+20]\nE       \tRtlUserThreadStart [0x00007FFA6B6FCC91+33]\n\nC:\\python_3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_register", "rerun": "0"}, "1": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message:\n", "test_name": "test_open_new_account", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_bill_pay", "rerun": "0"}, "3": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   \tGetHandleVerifier [0x00007FF7F9D7B632+29090]\n   \t(No symbol) [0x00007FF7F9CEE6E9]\n   \t(No symbol) [0x00007FF7F9BAB1CA]\n   \t(No symbol) [0x00007FF7F9BFEFD7]\n   \t(No symbol) [0x00007FF7F9BFF22C]\n   \t(No symbol) [0x00007FF7F9C497F7]\n   \t(No symbol) [0x00007FF7F9C2672F]\n   \t(No symbol) [0x00007FF7F9C465D9]\n   \t(No symbol) [0x00007FF7F9C26493]\n   \t(No symbol) [0x00007FF7F9BF09B1]\n   \t(No symbol) [0x00007FF7F9BF1B11]\n   \tGetHandleVerifier [0x00007FF7FA09883D+3294125]\n   \tGetHandleVerifier [0x00007FF7FA0E4423+3604371]\n   \tGetHandleVerifier [0x00007FF7FA0DA2E7+3563095]\n   \tGetHandleVerifier [0x00007FF7F9E36F16+797318]\n   \t(No symbol) [0x00007FF7F9CF986F]\n   \t(No symbol) [0x00007FF7F9CF5454]\n   \t(No symbol) [0x00007FF7F9CF55E0]\n   \t(No symbol) [0x00007FF7F9CE4A7F]\n   \tBaseThreadInitThunk [0x00007FFA6AE87374+20]\n   \tRtlUserThreadStart [0x00007FFA6B6FCC91+33]\n", "test_name": "test_find_transactions", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_update_contact_info", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_request_loan", "rerun": "0"}}, "suite_name": "test_pract.py"}}}, "date": "September 02, 2024", "start_time": 1725265986.0285413, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "3", "fail": "2", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "6"}